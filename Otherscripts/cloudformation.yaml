AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Lambda functions, API Gateway, and S3 buckets."

Parameters:
  # LambdaBucketName:
  #   Type: String
  #   Description: "S3 bucket to host Lambda deployment packages."
  #   Properties:
  #     BucketName: "code-lambda-bucket"
  FrontendBucketName:
    Type: String
    Description: "S3 bucket to host the frontend files."

Resources:
  # S3 Bucket for Frontend Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for Frontend Hosting
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${FrontendBucketName}/*"

  # S3 Bucket for Storage
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-storage"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for Storage
  StorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StorageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "rekognition.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-storage/*"
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-storage/*"
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-storage/*"
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-storage/*"

  # IAM Role for Lambda Execution for LF1
  LambdaExecutionRoleLF1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaExecutionRoleLF1"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LF1Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Policy for Elasticsearch
              - Effect: Allow
                Action:
                  - "es:*"
                Resource: "*"

              # Policy for Rekognition
              - Effect: Allow
                Action:
                  - "rekognition:*"
                Resource: "*"

              # S3 Permissions for Lambda
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"

  # Lambda Function for Upload
  UploadLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-upload"
      Handler: "lf1.handler"
      Role: !GetAtt LambdaExecutionRoleLF1.Arn
      Runtime: "nodejs22.x"
      Code:
        S3Bucket: "photo-album-lambda-bucket"
        S3Key: "deployment_packages/lf1_a3.zip"

  LambdaExecutionRoleLF2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaExecutionRoleLF2"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"

      Policies:
        - PolicyName: LF2Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Policy for Elasticsearch
              - Effect: Allow
                Action:
                  - "es:*"
                Resource: "*"

              # S3 Permissions for Lambda
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"

        - PolicyName: LF2LexPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AmazonLexFullAccessStatement1
                Effect: Allow
                Action:
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "kms:DescribeKey"
                  - "kms:ListAliases"
                  - "lambda:GetPolicy"
                  - "lambda:ListFunctions"
                  - "lex:*"
                  - "polly:DescribeVoices"
                  - "polly:SynthesizeSpeech"
                  - "kendra:ListIndices"
                  - "iam:ListRoles"
                  - "s3:ListAllMyBuckets"
                  - "logs:DescribeLogGroups"
                  - "s3:GetBucketLocation"
                Resource: "*"
              - Sid: AmazonLexFullAccessStatement2
                Effect: Allow
                Action:
                  - "lambda:AddPermission"
                  - "lambda:RemovePermission"
                Resource: "arn:aws:lambda:*:*:function:AmazonLex*"
                Condition:
                  StringEquals:
                    lambda:Principal: "lex.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement3
                Effect: Allow
                Action:
                  - "iam:GetRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                  - "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  - "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                  - "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                  - "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
              - Sid: AmazonLexFullAccessStatement4
                Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "lex.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement5
                Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "channels.lex.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement6
                Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "lexv2.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement7
                Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "channels.lexv2.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement8
                Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "replication.lexv2.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement9
                Effect: Allow
                Action:
                  - "iam:DeleteServiceLinkedRole"
                  - "iam:GetServiceLinkedRoleDeletionStatus"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                  - "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
                  - "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                  - "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                  - "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
              - Sid: AmazonLexFullAccessStatement10
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - "lex.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement11
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - "lexv2.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement12
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - "channels.lexv2.amazonaws.com"
              - Sid: AmazonLexFullAccessStatement13
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - "lexv2.amazonaws.com"

        - PolicyName: LF2LogPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "arn:aws:logs:us-east-1:445567085379:*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:us-east-1:445567085379:log-group:/aws/lambda/lf2_a3:*"

  # Lambda Function for Search
  SearchLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-search"
      Handler: "lf2.handler"
      Role: !GetAtt LambdaExecutionRoleLF2.Arn
      Runtime: "nodejs22.x"
      Code:
        S3Bucket: "photo-album-lambda-bucket"
        S3Key: "deployment_packages/lf2_a3.zip"

  UploadToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-storage/*"

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        schemes:
          - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
                - "application/json"
              parameters:
                - name: "q"
                  in: "query"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/"
                      - !GetAtt SearchLambdaFunction.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload/{bucket}/{filename}:
            put:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "filename"
                  in: "path"
                  required: true
                  type: "string"
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/MODEL4edc47"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt UploadToS3Role.Arn
                httpMethod: "PUT"
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:us-east-1:s3:path/"
                      - !Sub "${AWS::StackName}-storage"
                      - "/{filename}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.filename: "method.request.path.filename"
                  integration.request.path.bucket: "method.request.path.bucket"
                requestTemplates:
                  application/json:
                    "{\n  \"headers\": {\n    \"x-amz-meta-customLabels\"\
                    : \"$input.params('x-amz-meta-customLabels')\"\n  },\n}"
                passthroughBehavior: "when_no_match"
                type: "aws"
            options:
              consumes:
                - "application/json"
              parameters:
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
                - name: "filename"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key,x-amz-meta-customLabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          MODEL4edc47:
            type: "object"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        x-amazon-apigateway-binary-media-types:
          - "image/jpeg"
          - "image/jpg"
          - "image/png"
          - "multipart/form-data"

  # ApiResourceSearch:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt ApiGateway.RootResourceId
  #     PathPart: "search"
  #     RestApiId: !Ref ApiGateway

  # ApiMethodSearch:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref ApiResourceSearch
  #     HttpMethod: GET
  #     AuthorizationType: NONE
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchLambdaFunction.Arn}/invocations"

  # ApiResourceUpload:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt ApiGateway.RootResourceId
  #     PathPart: "upload"
  #     RestApiId: !Ref ApiGateway

  # ApiMethodUpload:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGateway
  #     ResourceId: !Ref ApiResourceUpload
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambdaFunction.Arn}/invocations"

  # Grant Permissions for API Gateway to Invoke Lambda
  # ApiGatewayPermissionSearch:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref SearchLambdaFunction
  #     Action: "lambda:InvokeFunction"
  #     Principal: "apigateway.amazonaws.com"
  #     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  # ApiGatewayPermissionUpload:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref UploadLambdaFunction
  #     Action: "lambda:InvokeFunction"
  #     Principal: "apigateway.amazonaws.com"
  #     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  PhotosOpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub "${AWS::StackName}-photos"
      EngineVersion: "OpenSearch_2.11"
      ClusterConfig:
        InstanceType: "t3.small.search"
        InstanceCount: 1
        DedicatedMasterEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: "gp2"

      # Enable encryption at rest and node-to-node encryption
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true

      # Access Policy to allow Lambda functions to interact with the domain
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaExecutionRoleLF1.Arn
                - !GetAtt LambdaExecutionRoleLF2.Arn
            Action:
              - "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/photos/*"

Outputs:
  FrontendURL:
    Description: "URL of the frontend website"
    Value: !Sub "http://${FrontendBucketName}.s3-website-${AWS::Region}.amazonaws.com"

  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
